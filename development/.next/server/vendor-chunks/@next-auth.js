"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@next-auth";
exports.ids = ["vendor-chunks/@next-auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@next-auth/prisma-adapter/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@next-auth/prisma-adapter/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PrismaAdapter = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst PrismaAdapter = (prisma)=>{\n    return {\n        async getAdapter ({ session, secret, ...appOptions }) {\n            const sessionMaxAge = session.maxAge * 1000; // default is 30 days\n            const sessionUpdateAge = session.updateAge * 1000; // default is 1 day\n            /**\n             * @todo Move this to core package\n             * @todo Use bcrypt or a more secure method\n             */ const hashToken = (token)=>crypto_1.createHash(\"sha256\").update(`${token}${secret}`).digest(\"hex\");\n            return {\n                displayName: \"PRISMA\",\n                createUser (profile) {\n                    var _a, _b;\n                    return prisma.user.create({\n                        data: {\n                            name: profile.name,\n                            email: profile.email,\n                            image: profile.image,\n                            emailVerified: (_b = (_a = profile.emailVerified) === null || _a === void 0 ? void 0 : _a.toISOString()) !== null && _b !== void 0 ? _b : null,\n                            ...profile\n                        }\n                    });\n                },\n                getUser (id) {\n                    return prisma.user.findUnique({\n                        where: {\n                            id\n                        }\n                    });\n                },\n                getUserByEmail (email) {\n                    if (!email) return Promise.resolve(null);\n                    return prisma.user.findUnique({\n                        where: {\n                            email\n                        }\n                    });\n                },\n                async getUserByProviderAccountId (providerId, providerAccountId) {\n                    var _a;\n                    const account = await prisma.account.findUnique({\n                        where: {\n                            providerId_providerAccountId: {\n                                providerId,\n                                providerAccountId\n                            }\n                        },\n                        select: {\n                            user: true\n                        }\n                    });\n                    return (_a = account === null || account === void 0 ? void 0 : account.user) !== null && _a !== void 0 ? _a : null;\n                },\n                updateUser (user) {\n                    var _a, _b;\n                    return prisma.user.update({\n                        where: {\n                            id: user.id\n                        },\n                        data: {\n                            name: user.name,\n                            email: user.email,\n                            image: user.image,\n                            emailVerified: (_b = (_a = user.emailVerified) === null || _a === void 0 ? void 0 : _a.toISOString()) !== null && _b !== void 0 ? _b : null\n                        }\n                    });\n                },\n                async deleteUser (userId) {\n                    await prisma.user.delete({\n                        where: {\n                            id: userId\n                        }\n                    });\n                },\n                async linkAccount (userId, providerId, providerType, providerAccountId, refreshToken, accessToken, accessTokenExpires) {\n                    await prisma.account.create({\n                        data: {\n                            userId,\n                            providerId,\n                            providerType,\n                            providerAccountId,\n                            refreshToken,\n                            accessToken,\n                            accessTokenExpires\n                        }\n                    });\n                },\n                async unlinkAccount (_, providerId, providerAccountId) {\n                    await prisma.account.delete({\n                        where: {\n                            providerId_providerAccountId: {\n                                providerId,\n                                providerAccountId\n                            }\n                        }\n                    });\n                },\n                createSession (user) {\n                    return prisma.session.create({\n                        data: {\n                            userId: user.id,\n                            expires: new Date(Date.now() + sessionMaxAge),\n                            sessionToken: crypto_1.randomBytes(32).toString(\"hex\"),\n                            accessToken: crypto_1.randomBytes(32).toString(\"hex\")\n                        }\n                    });\n                },\n                async getSession (sessionToken) {\n                    const session = await prisma.session.findUnique({\n                        where: {\n                            sessionToken\n                        }\n                    });\n                    if (session && session.expires < new Date()) {\n                        await prisma.session.delete({\n                            where: {\n                                sessionToken\n                            }\n                        });\n                        return null;\n                    }\n                    return session;\n                },\n                async updateSession (session, force) {\n                    if (!force && Number(session.expires) - sessionMaxAge + sessionUpdateAge > Date.now()) {\n                        return null;\n                    }\n                    return await prisma.session.update({\n                        where: {\n                            id: session.id\n                        },\n                        data: {\n                            expires: new Date(Date.now() + sessionMaxAge)\n                        }\n                    });\n                },\n                async deleteSession (sessionToken) {\n                    await prisma.session.delete({\n                        where: {\n                            sessionToken\n                        }\n                    });\n                },\n                async createVerificationRequest (identifier, url, token, _, provider) {\n                    await prisma.verificationRequest.create({\n                        data: {\n                            identifier,\n                            token: hashToken(token),\n                            expires: new Date(Date.now() + provider.maxAge * 1000)\n                        }\n                    });\n                    await provider.sendVerificationRequest({\n                        identifier,\n                        url,\n                        token,\n                        baseUrl: appOptions.baseUrl,\n                        provider\n                    });\n                },\n                async getVerificationRequest (identifier, token) {\n                    const hashedToken = hashToken(token);\n                    const verificationRequest = await prisma.verificationRequest.findUnique({\n                        where: {\n                            identifier_token: {\n                                identifier,\n                                token: hashedToken\n                            }\n                        }\n                    });\n                    if (verificationRequest && verificationRequest.expires < new Date()) {\n                        await prisma.verificationRequest.delete({\n                            where: {\n                                identifier_token: {\n                                    identifier,\n                                    token: hashedToken\n                                }\n                            }\n                        });\n                        return null;\n                    }\n                    return verificationRequest;\n                },\n                async deleteVerificationRequest (identifier, token) {\n                    await prisma.verificationRequest.delete({\n                        where: {\n                            identifier_token: {\n                                identifier,\n                                token: hashToken(token)\n                            }\n                        }\n                    });\n                }\n            };\n        }\n    };\n};\nexports.PrismaAdapter = PrismaAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@next-auth/prisma-adapter/dist/index.js\n");

/***/ })

};
;